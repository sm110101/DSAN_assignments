y = "Standardized Residuals") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log(Prop Owners)",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model1_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
print((summary(model_0)))
print((summary(model_1)))
print(cluster_se)
View(model1_df)
adf.test(log(data$urate)) #Stationary
log_total_single_parent),
model_1 = lm(log_total_suicide_rate ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se <- coeftest(model_1, vcov = vcovHC(model_1, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se)
vif(model_1)
model1_df$std_residuals = rstandard(model_1)
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log of Unemployment Rate",
y = "Standardized Residuals") +
theme_minimal()
# ok, now lets run the same regression using first differences of each non-stationary variable
model_2 = lm(diff_log_total_suicide_rate ~
permit +
diff_log_prop_owners +
log_urate +
diff_log_total_single_parent,
data = model1_df)
print((summary(model_2)))
# Now with clustered SEs
cluster_se2 <- coeftest(model_2, vcov = vcovHC(model_2, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se2)
print((summary(model_2)))
anova(model_1, model_2)
anova(model_2, model_1)
print(cluster_se)
# Running a log-log model with no differences
model_1 = lm(log_total_suicide_rate ~
factor(permit) +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
# Running a log-log model with no differences
model_1 = lm(log_total_suicide_rate ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
ggplot(model1_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
model2_df <- data %>%
select(Year, State, prop_owners, permit, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
# Running a log-log model with no differences
model_minors = lm(log(minor_suicide_rate) ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_minors)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se <- coeftest(model_1, vcov = vcovHC(model_1, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se)
model2_df <- data %>%
select(Year, State, prop_owners, permit, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
rm(model2_df)
model2_df <- data %>%
select(Year, State, prop_owners, universl, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
rm(model2_df)
model2_df <- data %>%
select(Year, State, prop_owners, universl, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicide_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
print((summary(model_3)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se3 <- coeftest(model_3, vcov = vcovHC(model_3, type = "HC1", cluster = "group", group = model2_df$State))
print(cluster_se3)
# Plotting
ggplot(model2_df, aes(x = log(total_homicide_rate), y = fitted_values)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ State) +  # Separate plots for each state
labs(title = "Actual vs Fitted Log(Total Homicide Rate) by State",
x = "Log of Total Homicide Rate",
y = "Fitted Values",
color = "State") +
theme_minimal()
# Calculate fitted values
model2_df$fitted_values = fitted(model_3)
# Plotting
ggplot(model2_df, aes(x = log_total_homicide_rate, y = fitted_values)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ State) +  # Separate plots for each state
labs(title = "Actual vs Fitted Log(Total Homicide Rate) by State",
x = "Log of Total Homicide Rate",
y = "Fitted Values",
color = "State") +
theme_minimal()
vif(model_3)
ggplot(model2_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
model2_df$std_residuals = rstandard(model_3)
ggplot(model2_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
print((summary(model_3)))
ggplot(model2_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log of Unemployment Rate",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model2_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
rm(list=ls())
setwd("~/Desktop/SL & DS")
setwd("~/Desktop/SL & DS")
setwd("~/Desktop/SL & DS/Homework/HW1")
setwd("~/Desktop/SL & DS/Homework/HW1")
data7 <- data.frame(
X1 = c(0, 2, 0, 0, -1, 1),
X2 = c(3, 0, 1, 1, 0, 1),
X3 = c(0, 0, 3, 2, 1, 1),
Y = c("Red", "Red", "Red", "Green", "Green", "Red")
)
euc_dist = function(df) {
sqrt((df$X1 - 0)^2 + (df$X2 - 0)^2 + (df$X3 - 0)^2)
}
euc_dist(data7)
print(euc_dist(data7))
rm(euc_dist)
X_test = c(X1 = 0, X2 = 0, X3 = 0)
euc_dist = function(df, test_point) {
sqrt(rowSums((df - test_point)^2))
}
print(euc_dist(data7))
print(euc_dist(data7, X_test))
print(euc_dist(data7[, c("X1", "X2", "X3")], X_test))
distances = euc_dist(data7[, c("X1", "X2", "X3")], X_test)
print(distances)
data7$Dist = distances
View(data7)
data8 = read.csv("College.csv", header = TRUE)
data8 = read.csv("data/College.csv", header = TRUE)
setwd("~/Desktop/SL & DS/Homework/HW1")
data8 = read.csv("data/College.csv", header = TRUE)
data8 = read.csv('data/College.csv', header = TRUE)
data8 = read.csv('College.csv', header = TRUE)
data8 = read.csv('data/College.csv', header = TRUE)
setwd("~/Desktop/SL & DS/Homework/HW1")
data8 = read.csv('data/College.csv', header = TRUE)
data8 = read.csv("data/College.csv", header = TRUE)
setwd("~/Desktop/SL & DS/Homework/HW1")
data8 = read.csv("data/College.csv", header = TRUE)
data8 = read.csv("data/college.csv", header = TRUE)
data8 = read_csv("data/college.csv", header = TRUE)
data8 = read.csv("data/college.csv", header = TRUE)
data8 = read.csv("~/Desktop/SL & DS/Homework/HW1data/college.csv", header = TRUE)
setwd("~/Desktop/SL & DS/Homework/HW1")
data8 = read.csv("data/college.csv", header = TRUE)
data8 = read.csv("/data/college.csv", header = TRUE)
getwd()
library(readr)
data8 = read_csv("data/college.csv", header = TRUE)
data8 = read_csv("data/college.csv")
setwd("~/Desktop/SL & DS/Homework/HW1")
data8 = read_csv("data/college.csv")
data8 = read_csv("HW1/data/college.csv")
data8 = read_csv("Homework/HW1/data/college.csv")
View(data8)
rm(data8)
college = read_csv("Homework/HW1/data/college.csv")
View(college)
rownames(college) = college[, 1]
rm(college)
college = read.csv("Homework/HW1/data/college.csv")
rm(college)
college = read.csv("Homework/HW1/data/college.csv", header = TRUE)
View(college)
rownames(college) = college[, 1]
View(college)
college = college[, -1]
View(college)
summary(college)
pairs(college[,1:10])
pairs(college[,2:11])
plot(college$Outstate, college$Private)
plot(x = Outstate, y = Private, data = college)
plot(x = college$Outstate, y = college$Private)
plot(x = c(college$Outstate, college$Private))
?plot
plot(college$Outstate)
plot(college$Outstate, college$Private)
boxplot(college$Outstate, college$Private)
boxplot(college$Outstate ~ college$Private)
boxplot(college$Outstate ~ college$Private,
xlab = "Private",
ylab = "Outstate")
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
summary(college$Elite)
boxplot(college$Outstate ~ college$Elite,
xlab = "Elite",
ylab = "Outstate")
hist(college[, 2:8])
par(mfrow=c(4,4))
hist(college[, 2:8])
hist(college$Enroll)
par(mfrow=c(2,2))
hist(college$Outstate)
hist(college$Room.Board)
hist(college$Accept)
hist(college$Enroll)
hist(college$Outstate,
main = "Outstate Tuition")
par(mfrow=c(2,2))
hist(college$Outstate,
main = "Outstate Tuition $")
hist(college$Room.Board,
main = "Room & Board Cost $")
hist(college$Accept,
main = "# Accepted")
hist(college$Enroll,
main = "# Enrolled")
boxplot(college$Books ~ college$Elite)
boxplot(college$Books ~ college$Elite,
xlab = "Elite",
ylab = "Cost of Books",
main = "Comparing Cost of Books between \n Elite and Non-elite Colleges")
boxplot(college$Books ~ college$Elite,
xlab = "Elite",
ylab = "Cost of Books",
main = "Comparing Cost of Books between \n Elite and Non-elite Colleges \n")
boxplot(college$Books ~ college$Elite,
xlab = "Elite",
ylab = "Cost of Books",
main = "Comparing Cost of Books between \n Elite and Non-elite Colleges")
boxplot(college$Books ~ college$Private,
xlab = "Elite",
ylab = "Cost of Books",
main = "Comparing Cost of Books between \n Elite and Non-elite Colleges")
boxplot(college$Books ~ college$Private,
xlab = "Private",
ylab = "Cost of Books",
main = "Comparing Cost of Books between \n Private & Public Colleges")
boxplot(college$Grad.Rate ~ college$Elite,
xlab = "Elite",
ylab = "Graduation Rate",
main = "Comparing Cost of Books between \n Private & Public Colleges")
boxplot(college$Grad.Rate ~ college$Elite,
xlab = "Elite",
ylab = "Graduation Rate",
main = "Comparing Graduation Rate Between \n Elite & Non-elite Colleges")
boxplot(college$Personal ~ college$Elite,
xlab = "Elite",
ylab = "Estiated Personal Spending $",
main = "Comparing Graduation Rate Between \n Elite & Non-elite Colleges")
boxplot(college$perc.alumni ~ college$Elite,
xlab = "Elite",
ylab = "Estiated Personal Spending $",
main = "Comparing Graduation Rate Between \n Elite & Non-elite Colleges")
boxplot(college$perc.alumni ~ college$Elite,
xlab = "Elite",
ylab = "Percent of Alumni who Donate",
main = "Comparing Alumni Donation Rates Between \n Elite & Non-elite Colleges")
boxplot(college$S.F.Ratio ~ college$Private,
xlab = "Private",
ylab = "Student/Faculty Ratio",
main = "Comparing Student/Faculty Ratio Between \n Public & Private Colleges")
vecDist = function(a,b) {
sqrt(sum((a - b)^2))
}
vec1 = matrix(c(1,2,3), nrow = 3, ncol = 1)
vec2 = matrix(c(4,5,6), nrow = 3, ncol = 1)
vecDist(vec1, vec2)
vec3 = matrix(c(7,8,9,10), nrow=4, ncol = 1
vec3 = matrix(c(7,8,9,10), nrow=4, ncol = 1)
vec3 = matrix(c(7,8,9,10), nrow = 4, ncol = 1)
vecDist(vec1, vec3)
vecDist = function(a,b) {
# Error for non-numeric
if (!is.numeric(a) || !is.numeric(b)) {
stop("Non-numeric Argument in Function input")
}
#Error for dimensional mismatch
if (dim(a) != dim(b)) {
stop("Dimentions of Inputs not the same")
}
sqrt(sum((a - b)^2))
}
vecDist(vec1, vec3)
print("Dimentions of Inputs not the same")
vecDist = function(a,b) {
# Error for non-numeric
if (!is.numeric(a) || !is.numeric(b)) {
stop("Non-numeric Argument in Function input")
}
#Error for dimensional mismatch
if (dim(a) != dim(b)) {
print("Dimentions of Inputs not the same")
}
sqrt(sum((a - b)^2))
}
vecDist(vec1, vec3)
vecDist = function(a,b) {
# Error for non-numeric
if (!is.numeric(a) || !is.numeric(b)) {
stop("Non-numeric Argument in Function input")
}
#Error for dimensional mismatch
if (dim(a) != dim(b)) {
stop("Dimentions of Inputs not the same")
}
sqrt(sum((a - b)^2))
}
vecDist(vec1, vec3)
vecDist = function(a,b) {
# Error for non-numeric
if (!is.numeric(a) || !is.numeric(b)) {
stop("Non-numeric Argument in Function input")
}
#Error for dimensional mismatch
if (dim(a) != dim(b) || dim(b) != dim(a)) {
stop("Dimentions of Inputs not the same")
}
sqrt(sum((a - b)^2))
}
vecDist(vec1, vec3)
vecDist = function(a,b) {
# Error for non-numeric
if (!is.numeric(a) || !is.numeric(b)) {
stop("Non-numeric Argument in Function input")
}
#Error for dimensional mismatch
if (length(a) != length(b)) {
stop("Dimensions of Inputs not the same")
}
sqrt(sum((a - b)^2))
}
vecDist(vec1, vec3)
vecDist(vec3, vec1)
vecDist(vec1, "test")
print(vecDist(vec1, vec2))
nearestNeighbor = function(x,M,output="point") {
# Error for non-numeric
if (!is.numeric(x) || !is.numeric(M)) {
stop("Non-numeric input in function argument")
}
# Dimensionality Check
if (ncol(M) != length(x)) {
stop("# Columns in M not equal to # Elements in x")
}
# Calculate Euc Distance
dist = apply(M, 1, function(row) vecDist(row, x))
# Find row index with smallest dist value
closest_index = which.min(dist)
# Conditional outputs based on "point" or "index"
if (output == "point") {
return(M[closest_index, , drop = FALSE])
} else if (output == "index") {
return(closest_index)
} else {
stop("Output must be 'Point' or 'Index'")
}
}
matrix1 = matrix(1:25, nrow = 5)
View(matrix1)
print(nearestNeighbor(vec4, matrix1, output = "point"))
vec4 = matrix(c(1,2,3,4,5), nrow = 5, ncol = 1)
print(nearestNeighbor(vec4, matrix1, output = "point"))
print(nearestNeighbor(vec4, matrix1, output = "index"))
nearestNeighbor(vec5, matrix1, output = "point")
vec5 = matrix(c(6,7,8,9), nrow = 4, ncol = 1)
nearestNeighbor(vec5, matrix1, output = "point")
nearestNeighbor("test", matrix1, output = "point")
print(nearestNeighbor(vec4, matrix1, output = "test"))
getwd()
getwd()
rm(list=ls())
college = read.csv("Homework/HW1/data/college.csv", header = TRUE)
college = read.csv("data/college.csv", header = TRUE)
college = read.csv("college.csv", header = TRUE)
college = read.csv("HW1/data/college.csv", header = TRUE)
rm(list=ls())
getwd()
college = read.csv("data/college.csv", header = TRUE)
college = read.csv("college.csv", header = TRUE)
college = read.csv("HW1/data/college.csv", header = TRUE)
setwd("~/Desktop/SL & DS/Homework/HW1")
setwd("~/Desktop/SL & DS/Homework/HW1")
college = read.csv("data/college.csv", header = TRUE)
rm(college)
college = read.csv("college.csv", header = TRUE)
college = read.csv("data/college.csv", header = TRUE)
getwd()
college = read.csv("data/college.csv", header = TRUE)
college = read.csv("~/Desktop/SL & DS/Homework/HW1/data/college.csv", header = TRUE)
rm(college)
getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#setwd("~/Desktop/SL & DS/Homework/HW1")
college = read.csv("data/college.csv", header = TRUE)
rm(college)
college = read.csv("data/college.csv", header = TRUE)
rm(college)
getwd()
setwd("~/Desktop/Statlearning/Homework/HW1")
setwd("/Users/seanmorris/Desktop/Statlearning/Homework/HW1")
