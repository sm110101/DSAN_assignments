abline(h=0, col='red', lty='dashed')) +
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_line(h=0, col='red', lty='dashed')) +
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept=0, linetype='dashed', color='red')) +
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red')) +
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(color = "red"), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(color = "red"), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log(Prop Owners)",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(color = "blue"), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log(Prop Owners)",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log(Prop Owners)",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model1_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
print((summary(model_0)))
print((summary(model_1)))
print(cluster_se)
View(model1_df)
adf.test(log(data$urate)) #Stationary
log_total_single_parent),
model_1 = lm(log_total_suicide_rate ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se <- coeftest(model_1, vcov = vcovHC(model_1, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se)
vif(model_1)
model1_df$std_residuals = rstandard(model_1)
ggplot(model1_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
ggplot(model1_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log of Unemployment Rate",
y = "Standardized Residuals") +
theme_minimal()
# ok, now lets run the same regression using first differences of each non-stationary variable
model_2 = lm(diff_log_total_suicide_rate ~
permit +
diff_log_prop_owners +
log_urate +
diff_log_total_single_parent,
data = model1_df)
print((summary(model_2)))
# Now with clustered SEs
cluster_se2 <- coeftest(model_2, vcov = vcovHC(model_2, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se2)
print((summary(model_2)))
anova(model_1, model_2)
anova(model_2, model_1)
print(cluster_se)
# Running a log-log model with no differences
model_1 = lm(log_total_suicide_rate ~
factor(permit) +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
# Running a log-log model with no differences
model_1 = lm(log_total_suicide_rate ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_1)))
ggplot(model1_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
model2_df <- data %>%
select(Year, State, prop_owners, permit, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
# Running a log-log model with no differences
model_minors = lm(log(minor_suicide_rate) ~
permit +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model1_df)
print((summary(model_minors)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se <- coeftest(model_1, vcov = vcovHC(model_1, type = "HC1", cluster = "group", group = model1_df$State))
print(cluster_se)
model2_df <- data %>%
select(Year, State, prop_owners, permit, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
rm(model2_df)
model2_df <- data %>%
select(Year, State, prop_owners, universl, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
model2_df <- model2_df %>%
mutate(log_total_homicde_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
rm(model2_df)
model2_df <- data %>%
select(Year, State, prop_owners, universl, adult_homicide_rate, minor_homicide_rate,
total_homicide_rate, urate, total_single_parent, single_mother, single_father)
model2_df <- model2_df %>%
mutate(log_total_homicide_rate = log(total_homicide_rate),
log_prop_owners = log(prop_owners),
log_urate = log(urate),
log_total_single_parent = log(total_single_parent))
# Running a log-log model with no differences
model_3 = lm(log_total_homicide_rate ~
universl +
log_prop_owners +
log_urate +
log_total_single_parent,
data = model2_df)
print((summary(model_3)))
# Looking better, but I will now add clustered standard errors to account for any group-dependence
cluster_se3 <- coeftest(model_3, vcov = vcovHC(model_3, type = "HC1", cluster = "group", group = model2_df$State))
print(cluster_se3)
# Plotting
ggplot(model2_df, aes(x = log(total_homicide_rate), y = fitted_values)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ State) +  # Separate plots for each state
labs(title = "Actual vs Fitted Log(Total Homicide Rate) by State",
x = "Log of Total Homicide Rate",
y = "Fitted Values",
color = "State") +
theme_minimal()
# Calculate fitted values
model2_df$fitted_values = fitted(model_3)
# Plotting
ggplot(model2_df, aes(x = log_total_homicide_rate, y = fitted_values)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ State) +  # Separate plots for each state
labs(title = "Actual vs Fitted Log(Total Homicide Rate) by State",
x = "Log of Total Homicide Rate",
y = "Fitted Values",
color = "State") +
theme_minimal()
vif(model_3)
ggplot(model2_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
model2_df$std_residuals = rstandard(model_3)
ggplot(model2_df, aes(x = log(prop_owners), y = std_residuals)) +
geom_point(aes(color = State), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
facet_wrap(~ State) +
labs(title = "Standardized Residuals vs Log(Prop Owners) by State",
x = "Log(Prop Owners)",
y = "Standardized Residuals",
color = "State") +
theme_minimal()
print((summary(model_3)))
ggplot(model2_df, aes(x = log(urate), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(urate)",
x = "Log of Unemployment Rate",
y = "Standardized Residuals") +
theme_minimal()
ggplot(model2_df, aes(x = log(total_single_parent), y = std_residuals)) +
geom_point(aes(), alpha = 0.6) +
geom_hline(yintercept = 0, linetype='dashed', color='red') +
labs(title = "Standardized Residuals vs Log(total_single_parent)",
x = "Log of # Children in Single-parent Households",
y = "Standardized Residuals") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("~/Desktop/Time Series/Notes/Tutorial 1")
install.packages("yfR")
?yfR
??yfR
yf_get("NYCB",
first_date = two_y_prior,,
last_date = today)
library(yfR)
yf_get("NYCB",
first_date = two_y_prior,,
last_date = today)
two_y_prior = Sys.Date()-(365*2)
today = Sys.Date()
yf_get("NYCB",
first_date = two_y_prior,,
last_date = today)
NYCB = yf_get("NYCB",
first_date = two_y_prior,,
last_date = today)
WAL = yf_get("WAL",
first_date = two_y_prior,
last_date = today)
View(NYCB)
tsplot(NYCB$price_close,
ylab = "Date",
xlab = "Closing Price")
library(TSA)
library(astsa)
tsplot(NYCB$price_close,
ylab = "Date",
xlab = "Closing Price")
tsplot(NYCB$price_close[250:500],
ylab = "Date",
xlab = "Closing Price")
tsplot(NYCB$price_close,
ylab = "Date",
xlab = "Closing Price")
rm(list=ls())
setwd("~/Desktop/Time Series/Homework/01")
library(astsa)
var_x = 2
var_y = 3
corr_xy = -0.34
#a. var(4x)
var_4x = (4**2)*var_x
cov_xy = corr_xy * sqrt(var_x) * sqrt(var_y)
#b. Var(X - Y)
var_x_min_y = var_x + var_y - 2*cov_xy
rm(var_4x)
rm(var_x_min_y)
#a. Var(4X)
ans_A = (4**2)*var_x
#b. Var(X - Y)
ans_B = var_x + var_y - 2*cov_xy
#c. Var(4X - 6Y)
ans_C = (4**2)*var_x + (6**2)*var_y - 48*cov_xy
#d. Cov(Y, X+Y)
# Recall: Cov(Y, Y) = Var(Y)
# Thus, = Cov(Y, X) + Cov(Y, Y)
#       = Cov(Y, X) + Var(Y)
ans_D = cov_xy + var_y
#e. Corr(2X+Y, X-3Y)
# Must find individual variances first:
var_2x_plus_y = (2**2)*var_x + var_y + 4*cov_xy
var_X_min_3Y = var_x + (3**3)*var_y - 6*cov_xy
# Now covarariance:
cov_2x_plus_y_x_minus_3y = 2*cov_xy - 3*cov_xy
# Finally:
ans_E = cov_2x_plus_y_x_minus_3y / (sqrt(var_2x_plus_y)*sqrt(var_X_min_3Y))
rm(cov_2x_plus_y_x_minus_3y)
# Now covarariance:
# Cov(2X+Y, X−3Y) = Cov(2X, X) − 3Cov(2X, Y) + Cov(Y, X) − 3 Cov(Y, Y)
#                 = 2Var(x) - 6Cov(X, Y) + Cov(X, Y) - 3Var(y)
cov_2x_plus_y_x_minus_3y = 2*var_x - 6*cov_xy + cov_xy - 3*var_y
# Finally:
ans_E = cov_2x_plus_y_x_minus_3y / (sqrt(var_2x_plus_y)*sqrt(var_X_min_3Y))
cat("A:   ", ans_A,"\n\n",
"B:   ", ans_B,"\n\n",
"C:   ", ans_C,"\n\n",
"D:   ", ans_D,"\n\n",
"E:   ", ans_E)
cat(" A:   ", ans_A,"\n\n",
"B:   ", ans_B,"\n\n",
"C:   ", ans_C,"\n\n",
"D:   ", ans_D,"\n\n",
"E:   ", ans_E)
cat(" A:", ans_A,"\n\n",
"B:", ans_B,"\n\n",
"C:", ans_C,"\n\n",
"D:", ans_D,"\n\n",
"E:", ans_E)
axis(1, at = seq(0, 48, by = 12), las=2)
tsplot(electricity[1:60],
main = "Truncated Electicity (kWh)",
ylab = "kWh",
xlab = "Date")
library(TSA)
data("electricity")
elec = electricity
tsplot(electricity,
main = "Electicity (kWh, 1973-2005)",
xlab = "Year",
ylab = "Kilowatt Hours (kWh)")
tsplot(electricity[1:60],
main = "Truncated Electicity (kWh)",
ylab = "kWh",
xlab = "Date")
axis(1, at = seq(0, 48, by = 12), las=2)
tsplot(electricity[1:24],
main = "Truncated Electicity (kWh)",
ylab = "kWh",
xlab = "Date")
axis(1, at = seq(0, 12, by = 12), las=2)
tsplot(electricity[1:24],
main = "Truncated Electicity (kWh)",
ylab = "kWh",
xlab = "Date")
axis(1, at = seq(0, 24, by = 12), las=2)
install_tinytex()
install.packages("tinytex")
setwd("~/Desktop/Statlearning/Homework/HW3")
setwd("~/Desktop/Statlearning/Homework/HW3")
auto = read.csv("Auto.csv", header=TRUE)
View(auto)
mpg01 = rep(NA, nrow(auto))
rm(mpg01)
auto$mpg01 = ifelse(auto$mpg >= median(auto$mpg), 1, 0)
median(auto$mpg)
library(dplyr)
auto %>% relocate(mpg01, .after = mpg)
boxplot(auto$cylinders ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "# Cylinders")
boxplot(auto$horsepower ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "Horsepower")
boxplot(as.numeric(auto$horsepower) ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "Horsepower")
typeof(vars(auto))
rm(auto)
auto = as.matrix(read.csv("Auto.csv", header=TRUE))
view(auto)
View(auto)
auto$mpg01 = ifelse(auto$mpg >= median(auto$mpg), 1, 0)
auto = as.data.frame(read.csv("Auto.csv", header=TRUE))
auto$mpg01 = ifelse(auto$mpg >= median(auto$mpg), 1, 0)
auto %>% relocate(mpg01, .after = mpg)
typeof(vars(auto))
typeof(auto$horsepower)
boxplot(auto$cylinders ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "# Cylinders")
boxplot(auto$horsepower ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "Horsepower")
boxplot(as.numeric(auto$horsepower) ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "Horsepower")
View(auto)
auto %>% relocate(mpg01, .after = mpg)
View(auto)
View(auto)
rm(auto)
auto = read.csv("Auto.csv", header=TRUE)
auto$mpg01 = ifelse(auto$mpg >= median(auto$mpg), 1, 0)
auto %>% relocate(mpg01, .after = mpg)
View(auto)
auto %>% relocate(mpg01)
View(auto)
head(auto[1])
head(auto[2])
head(auto[-1])
boxplot(auto$weight ~ auto$mpg01,
xlab = "mpg (1 if above median)",
ylab = "Weight")
screeplot(auto$weight,auto$mpg)
plot(auto$weight,auto$mpg)
plot(auto$weight,auto$mpg,
xlab = "Weight of Vehicle",
ylab = "mpg")
par(mfrow = c(2,2))
plot(auto$weight,auto$mpg,
xlab = "Weight of Vehicle",
ylab = "mpg")
plot(auto$horsepower,auto$mpg,
xlab = "Horsepower",
ylab = "mpg")
plot(auto$displacement,auto$mpg,
xlab = "Displacement",
ylab = "mpg")
plot(auto$acceleration,auto$mpg,
xlab = "Weight of Vehicle",
ylab = "mpg")
par(mfrow = c(2,2))
plot(auto$weight,auto$mpg,
xlab = "Weight of Vehicle",
ylab = "mpg")
plot(auto$horsepower,auto$mpg,
xlab = "Horsepower",
ylab = "mpg")
plot(auto$displacement,auto$mpg,
xlab = "Displacement",
ylab = "mpg")
plot(auto$acceleration,auto$mpg,
xlab = "Acceleration",
ylab = "mpg")
par(mfrow = c(2,2))
plot(auto$weight,auto$mpg,
xlab = "Weight of Vehicle",
ylab = "mpg")
plot(auto$horsepower,auto$mpg,
xlab = "Horsepower",
ylab = "mpg")
plot(auto$displacement,auto$mpg,
xlab = "Displacement \n (Overall volume of air displaced)",
ylab = "mpg")
plot(auto$acceleration,auto$mpg,
xlab = "Acceleration",
ylab = "mpg")
View(auto)
plot(auto$year, auto$mpg)
boxplot(auto$year ~ auto$mpg)
boxplot(auto$year ~ auto$mpg01)
boxplot(auto$mpg ~ auto$year)
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red", lty = 3))
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red"))
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red")
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red", lty=3)
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red", lty=1)
boxplot(auto$mpg ~ auto$year)
abline(h = median(auto$mpg), col="Red", lty=2)
boxplot(auto$mpg ~ auto$year,
xlab = "Year",
ylab = "MPG")
abline(h = median(auto$mpg), col="Red", lty=2)
dim(auto)
nrow(auto)
sample = floor(0.80 * nrow(auto))
sample = floor(0.75 * nrow(auto))
# For reproducability
set.seed(1789)
?seq_len
training_index = sample(1:nrow(auto), size = sample)
training_index = sort(sample(1:nrow(auto), size = sample))
training_index
# Splitting Data
auto_train = auto[training_index, ]
auto_test = autp[-training_index, ]
auto_test = auto[-training_index, ]
head(auto_train)
